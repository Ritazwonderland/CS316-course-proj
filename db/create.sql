-- Feel free to modify this file to match your development goal.
-- Here we create tables for Users, Products, Wishes, and Addresses.

CREATE TABLE IF NOT EXISTS Users (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    email VARCHAR UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    firstname VARCHAR(255) NOT NULL,
    lastname VARCHAR(255) NOT NULL
);


CREATE TABLE Products (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(255) UNIQUE NOT NULL,
    price DECIMAL(12,2) NOT NULL,
    description TEXT,
    image VARCHAR(255),
    category VARCHAR(100),
    available BOOLEAN DEFAULT TRUE
);


CREATE TABLE Inventory (
    user_id INT,
    product_id INT,
    quantity INT NOT NULL,
    PRIMARY KEY (user_id, product_id),
    FOREIGN KEY (user_id) REFERENCES Users(id),
    FOREIGN KEY (product_id) REFERENCES Products(id)
);

CREATE TABLE Ordered_Items_Info (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    date_order_placed timestamp without time zone NOT NULL DEFAULT (current_timestamp AT TIME ZONE 'UTC'),
    fulfilled BOOLEAN NOT NULL,
    buyer_id INT,
    seller_id INT,
    product_id INT,
    total_items INT NOT NULL,
    buyer_address VARCHAR(255) NOT NULL,
    FOREIGN KEY (buyer_id) REFERENCES Users(id),
    FOREIGN KEY (seller_id) REFERENCES Users(id),
    FOREIGN KEY (product_id) REFERENCES Products(id)
);

CREATE TABLE IF NOT EXISTS Wishes (
    id SERIAL PRIMARY KEY,
    user_id INT NOT NULL,
    product_id INT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES Users(id),
    FOREIGN KEY (product_id) REFERENCES Products(id),
    UNIQUE (user_id, product_id)
);

CREATE TABLE IF NOT EXISTS Addresses (
    id SERIAL PRIMARY KEY,
    user_id INT NOT NULL,
    street VARCHAR(255) NOT NULL,
    city VARCHAR(255) NOT NULL,
    state VARCHAR(255) NOT NULL,
    zip_code VARCHAR(20) NOT NULL,
    is_default BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (user_id) REFERENCES Users(id)
);

CREATE TABLE IF NOT EXISTS BalanceTransactions (
    id SERIAL PRIMARY KEY,
    user_id INT NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    transaction_type VARCHAR(10) NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES Users(id)
);

CREATE TABLE IF NOT EXISTS Orders (
    id SERIAL PRIMARY KEY,
    uid INT NOT NULL,
    time_purchased TIMESTAMP NOT NULL DEFAULT NOW(),
    fulfillment_status BOOLEAN DEFAULT False,
    FOREIGN KEY (uid) REFERENCES Users(id)
);

CREATE TABLE IF NOT EXISTS OrderItems (
    id SERIAL PRIMARY KEY,
    order_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    FOREIGN KEY (order_id) REFERENCES Orders(id),
    FOREIGN KEY (product_id) REFERENCES Products(id)
);

CREATE TABLE IF NOt EXISTS Cart_Items (
    user_id INT REFERENCES Users(id), -- Unique ID of the owner (user) of the cart
    product_id INT REFERENCES Products(id), -- Unique ID/Name of product in cart
    quantity INT NOT NULL, -- Quantity of the item in the cart
    saved_for_later BOOLEAN DEFAULT False,
    PRIMARY KEY(user_id, product_id)
);

CREATE TABLE IF NOt EXISTS Orders_Buy (
    order_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, -- Unique ID of the individual order submitted
    user_id INT NOT NULL REFERENCES Users(id), -- Unique ID of the owner (user) of the order
    total_price DECIMAL(10, 2) NOT NULL, -- Total price paid for the order
    order_date TIMESTAMP NOT NULL DEFAULT (current_timestamp AT TIME ZONE 'UTC'), -- Date and time of the order submission
    order_status BOOLEAN DEFAULT False -- Order status
);

ALTER TABLE Order_Items ADD COLUMN unit_price DECIMAL(10, 2);

CREATE TABLE IF NOt EXISTS Order_Items (
    order_id INT REFERENCES Orders_Buy(order_id), -- Unique ID of the individual order submitted
    product_id INT REFERENCES Products(id), -- Unique ID/Name of product in the order
    quantity INT DEFAULT 1, -- Quantity of the item in the order
    fulfilled BOOLEAN DEFAULT False, -- Whether the product has been fulfilled by the seller or not
    fulfillment_date TIMESTAMP, -- Date and time the order has been fulfilled
    unit_price DECIMAL(10, 2),
    PRIMARY KEY(order_id, product_id)
);
    
CREATE TABLE Feedback (
    id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    uid INT NOT NULL, 
    pid INT, 
    sid INT,
    review VARCHAR(255) NOT NULL,
    time_reviewed timestamp without time zone NOT NULL DEFAULT (current_timestamp AT TIME ZONE 'UTC'),
    primary key (uid, pid, sid)
);

CREATE OR REPLACE FUNCTION update_order_status()
RETURNS TRIGGER AS $$
DECLARE
    current_order_id INT;
BEGIN
    -- Get the order_id for the current item
    SELECT order_id INTO current_order_id
    FROM Order_Items
    WHERE order_id = (
        SELECT order_id 
        FROM Ordered_Items_Info 
        WHERE id = NEW.id
    );

    -- Check if all items for a specific order are fulfilled
    IF NOT EXISTS (
        SELECT 1
        FROM Order_Items oi
        WHERE oi.order_id = current_order_id 
        AND oi.fulfilled = FALSE
    ) THEN
        -- Update the order's status to 'Fulfilled' in Orders_Buy
        UPDATE Orders_Buy
        SET order_status = true
        WHERE order_id = current_order_id;

        -- Update the order's fulfillment status in Orders
        UPDATE Orders
        SET fulfillment_status = true
        WHERE id = current_order_id;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_order_status
AFTER INSERT OR UPDATE OF fulfilled
ON Ordered_Items_Info
FOR EACH ROW
EXECUTE FUNCTION update_order_status();
